{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","this","ionRouteDataChanged","url","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","QUERY","matches","querySelector","undefined","routeRedirect","routes","find","input","from","to","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","RouterSegments","allparams","matchesDefault","segment","data","next","slice","mergeParams","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","shift","readRedirects","Array","children","el","tagName","readProp","readRoutes","flattenRouterTree","readRouteNodes","node","component","Error","componentProps","beforeLeave","beforeEnter","prop","hasAttribute","getAttribute","nodes","flattenNode","push","sub","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","debug","document","body","Promise","resolve","window","addEventListener","once","onRoutesChanged","onRedirectChanged","bind","historyDirection","getPath","canProceed","runGuards","redirect","writeNavStateRoot","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","queryString","setPath","history","waitPromise","group","forEach","r","groupEnd","redirects","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","win","replaceState","title","redirectFrom","unlock","lock","p","toChain","fromChain","beforeEnterHook","beforeLeaveHook","canLeave","canEnter","routeEvent","routeChangeEvent","pushState","loc","hash","prefix","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","routerAnimation","mode","attrs","rel","target","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { k as debounce } from './helpers-47d562d2.js';\nimport { o as openURL, c as createColorClasses } from './theme-5641d27f.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n    const path = segments\n        .filter(s => s.length > 0)\n        .join('/');\n    return '/' + path;\n};\nconst chainToPath = (chain) => {\n    const path = [];\n    for (const route of chain) {\n        for (const segment of route.path) {\n            if (segment[0] === ':') {\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                path.push(param);\n            }\n            else if (segment !== '') {\n                path.push(segment);\n            }\n        }\n    }\n    return path;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n    let url = generatePath([\n        ...parsePath(root),\n        ...path\n    ]);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url = url + '?' + queryString;\n    }\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\nconst removePrefix = (prefix, path) => {\n    if (prefix.length > path.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return path;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n            return null;\n        }\n    }\n    if (path.length === prefix.length) {\n        return [''];\n    }\n    return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n    let pathname = loc.pathname;\n    if (useHash) {\n        const hash = loc.hash;\n        pathname = (hash[0] === '#')\n            ? hash.slice(1)\n            : '';\n    }\n    const prefix = parsePath(root);\n    const path = parsePath(pathname);\n    return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n    if (path == null) {\n        return [''];\n    }\n    const removeQueryString = path.split('?')[0];\n    const segments = removeQueryString.split('/')\n        .map(s => s.trim())\n        .filter(s => s.length > 0);\n    if (segments.length === 0) {\n        return [''];\n    }\n    else {\n        return segments;\n    }\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const path = [];\n        chain.forEach(r => path.push(...r.path));\n        const ids = chain.map(r => r.id);\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await outlet.componentOnReady();\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // tslint:disable-next-line:no-constant-condition\n    while (true) {\n        outlet = searchNavNode(node);\n        if (outlet) {\n            const id = await outlet.getRouteId();\n            if (id) {\n                node = id.element;\n                id.element = undefined;\n                ids.push(id);\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise(resolve => {\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\n    });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(QUERY)) {\n        return root;\n    }\n    const outlet = root.querySelector(QUERY);\n    return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n    const { from, to } = route;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > input.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== input[i]) {\n            return false;\n        }\n    }\n    return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n    return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let i = 0;\n    for (; i < len; i++) {\n        if (ids[i].toLowerCase() !== chain[i].id) {\n            break;\n        }\n    }\n    return i;\n};\nconst matchesPath = (inputPath, chain) => {\n    const segments = new RouterSegments(inputPath);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const path = chain[i].path;\n        if (path[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of path) {\n                const data = segments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = (matchesDefault)\n        ? matchesDefault === (segments.next() === '')\n        : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, allparams[i])\n        }));\n    }\n    return chain;\n};\nconst mergeParams = (a, b) => {\n    if (!a && b) {\n        return b;\n    }\n    else if (a && !b) {\n        return a;\n    }\n    else if (a && b) {\n        return Object.assign(Object.assign({}, a), b);\n    }\n    return undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    const plainIDs = ids.map(i => i.id);\n    for (const chain of chains) {\n        const score = matchesIDs(plainIDs, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, ids[i] && ids[i].params)\n        }));\n    }\n    return null;\n};\nconst routerPathToChain = (path, chains) => {\n    let match = null;\n    let matches = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesPath(path, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > matches) {\n                matches = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const path of route.path) {\n            if (path[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (path !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(path) {\n        this.path = path.slice();\n    }\n    next() {\n        if (this.path.length > 0) {\n            return this.path.shift();\n        }\n        return '';\n    }\n}\n\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map(el => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')),\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n    return Array.from(node.children)\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n        .map(el => {\n        const component = readProp(el, 'component');\n        if (component == null) {\n            throw new Error('component missing in ion-route');\n        }\n        return {\n            path: parsePath(readProp(el, 'url')),\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(root, el)\n        };\n    });\n};\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\nconst flattenRouterTree = (nodes) => {\n    const routes = [];\n    for (const node of nodes) {\n        flattenNode([], routes, node);\n    }\n    return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n    const s = chain.slice();\n    s.push({\n        id: node.id,\n        path: node.path,\n        params: node.params,\n        beforeLeave: node.beforeLeave,\n        beforeEnter: node.beforeEnter\n    });\n    if (node.children.length === 0) {\n        routes.push(s);\n        return;\n    }\n    for (const sub of node.children) {\n        flattenNode(s, routes, sub);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let path = this.getPath();\n        const canProceed = await this.runGuards(path);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                path = parsePath(canProceed.redirect);\n            }\n            return false;\n        }\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, processNextHandler => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    async push(url, direction = 'forward', animation) {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        let path = parsePath(url);\n        let queryString = url.split('?')[1];\n        const canProceed = await this.runGuards(path);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                path = parsePath(canProceed.redirect);\n                queryString = canProceed.redirect.split('?')[1];\n            }\n            else {\n                return false;\n            }\n        }\n        this.setPath(path, direction, queryString);\n        return this.writeNavStateRoot(path, direction, animation);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction, animation) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const toChain = routerPathToChain(to, routes);\n        const fromChain = routerPathToChain(from, routes);\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\n        if (canEnter === false || typeof canEnter === 'object') {\n            return canEnter;\n        }\n        return true;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction, queryString) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true\n            }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}
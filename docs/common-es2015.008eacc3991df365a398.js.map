{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/haptic-7b8ba70a.js","webpack:///node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","webpack:///node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","webpack:///node_modules/@ionic/core/dist/esm/button-active-5da929d4.js","webpack:///src/app/components/components.module.ts","webpack:///node_modules/@ionic/core/dist/esm/theme-5641d27f.js"],"names":["HapticEngine","win","window","Capacitor","isPluginAvailable","Plugins","Haptics","this","getEngine","isCordova","TapticEngine","isCapacitor","options","engine","style","toUpperCase","impact","notification","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","selection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","SPINNERS","dur","circles","fn","index","total","animationDelay","angle","Math","PI","r","sin","cos","step","elmDuration","cx","cy","fill","viewBox","transform","_","lines","y1","y2","attachComponent","async","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","el","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","componentOnReady","detachComponent","element","removeViewFromDom","parentElement","remove","Promise","resolve","createButtonActiveGesture","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","document","target","elementFromPoint","clearActiveButton","setActiveButton","button","buttonToModify","dispatchClick","click","undefined","createGesture","gestureName","threshold","onStart","ev","currentX","currentY","onMove","onEnd","ComponentsModule","hostContext","selector","closest","createColorClasses","color","cssClassMap","length","getClassMap","classes","map","Array","isArray","split","filter","trim","SCHEME","openURL","url","direction","animation","test","router","querySelector","preventDefault","push"],"mappings":"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","file":"x","sourcesContent":["const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionEnd();\n        }\n        else {\n            engine.gestureSelectionEnd();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","import { c as writeTask } from './index-92848855.js';\nimport { createGesture } from './index-eea61379.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n    let currentTouchedButton;\n    let initialTouchedButton;\n    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const target = document.elementFromPoint(x, y);\n        if (!target || !isButton(target)) {\n            clearActiveButton();\n            return;\n        }\n        if (target !== currentTouchedButton) {\n            clearActiveButton();\n            setActiveButton(target, hapticFeedbackFn);\n        }\n    };\n    const setActiveButton = (button, hapticFeedbackFn) => {\n        currentTouchedButton = button;\n        if (!initialTouchedButton) {\n            initialTouchedButton = currentTouchedButton;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.add('ion-activated'));\n        hapticFeedbackFn();\n    };\n    const clearActiveButton = (dispatchClick = false) => {\n        if (!currentTouchedButton) {\n            return;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.remove('ion-activated'));\n        /**\n         * Clicking on one button, but releasing on another button\n         * does not dispatch a click event in browsers, so we\n         * need to do it manually here. Some browsers will\n         * dispatch a click if clicking on one button, dragging over\n         * another button, and releasing on the original button. In that\n         * case, we need to make sure we do not cause a double click there.\n         */\n        if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n            currentTouchedButton.click();\n        }\n        currentTouchedButton = undefined;\n    };\n    return createGesture({\n        el,\n        gestureName: 'buttonActiveDrag',\n        threshold: 0,\n        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n        onEnd: () => {\n            clearActiveButton(true);\n            hapticSelectionEnd();\n            initialTouchedButton = undefined;\n        }\n    });\n};\n\nexport { createButtonActiveGesture as c };\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RatingComponent } from \"./rating/rating.component\";\nimport { IonicModule } from \"@ionic/angular\";\nimport { LocalPillComponent } from \"./local-pill/local-pill.component\";\nimport { ScannerComponent } from \"./scanner/scanner.component\";\nimport { CameraComponent } from \"./camera/camera.component\";\nimport { CameraUiComponent } from \"./camera-ui/camera-ui.component\";\n\n@NgModule({\n  declarations: [\n    CameraComponent,\n    CameraUiComponent,\n    LocalPillComponent,\n    RatingComponent,\n    ScannerComponent,\n  ],\n  exports: [\n    CameraComponent,\n    CameraUiComponent,\n    LocalPillComponent,\n    RatingComponent,\n    ScannerComponent,\n  ],\n  imports: [IonicModule, CommonModule],\n})\nexport class ComponentsModule {}\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"]}